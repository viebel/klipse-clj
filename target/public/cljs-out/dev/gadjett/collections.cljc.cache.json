["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Infinity",["^ "],"~$Error",["^ "],"~$Function",["^ "],"~$Object",["^ "]],"~:use-macros",["^ ","~$postwalk","~$clojure.walk","~$union","~$clojure.set","~$join","~$clojure.string","~$split-lines","^=","~$blank?","^="],"~:excludes",["~#set",[]],"~:name","~$gadjett.collections","~:imports",null,"~:requires",["^ ","^;","^;","^9","^9","^=","^=","~$zip","~$clojure.zip","^G","^G"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^8","^9","^:","^;","^<","^=","^>","^=","^?","^="],"~:defs",["^ ","~$unflatten-keys",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","~:line",485,"~:column",7,"~:end-line",485,"~:end-column",21,"~:arglists",["~#list",["~$quote",["^T",[["~$m"]]]]],"~:doc","\n  Unflattend the keys of a map that has been `flatten-keys`ed.\n\n~~~klipse\n(unflatten-keys {[:a :b] 1, [:c :d] 2, [:c :e] 4, [:c :f :g] 8})\n~~~\n"],"^B","~$gadjett.collections/unflatten-keys","~:variadic",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",21,"~:method-params",["^T",[["~$m"]]],"~:protocol-impl",null,"~:arglists-meta",["^T",[null,null]],"^P",1,"^O",485,"^Q",485,"~:max-fixed-arity",1,"~:fn-var",true,"^S",["^T",["^U",["^T",[["~$m"]]]]],"^V","\n  Unflattend the keys of a map that has been `flatten-keys`ed.\n\n~~~klipse\n(unflatten-keys {[:a :b] 1, [:c :d] 2, [:c :e] 4, [:c :f :g] 8})\n~~~\n"],"~$sequence->map",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",136,"^P",7,"^Q",136,"^R",20,"^S",["^T",["^U",["^T",[["~$s"]]]]],"^V","Converts a sequence into a map where the keys are the indexes of the elements in the sequence.\n\n  ~~~klipse\n  (sequence->map [10 20 30])\n  ~~~\n  "],"^B","~$gadjett.collections/sequence->map","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",20,"^Y",["^T",[["~$s"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",136,"^Q",136,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["~$s"]]]]],"^V","Converts a sequence into a map where the keys are the indexes of the elements in the sequence.\n\n  ~~~klipse\n  (sequence->map [10 20 30])\n  ~~~\n  "],"~$=without-keys?",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",37,"^P",7,"^Q",37,"^R",21,"^S",["^T",["^U",["^T",[["~$obj-a","~$obj-b","~$keys-list"]]]]],"^V","Compare two maps exclusing some keys\n\n~~~klipse\n  (=without-keys? {:a 1 :b 2 :c 3} {:a 1 :b 5} #{:b :c})\n~~~\n  "],"^B","~$gadjett.collections/=without-keys?","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",21,"^Y",["^T",[["^15","^16","^17"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",37,"^Q",37,"^10",3,"^11",true,"^S",["^T",["^U",["^T",[["^15","^16","^17"]]]]],"^V","Compare two maps exclusing some keys\n\n~~~klipse\n  (=without-keys? {:a 1 :b 2 :c 3} {:a 1 :b 5} #{:b :c})\n~~~\n  "],"~$dissoc-in",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",340,"^P",7,"^Q",340,"^R",16,"^S",["^T",["^U",["^T",[["~$m",["~$k","~$&","~$ks","~:as","~$keys"]]]]]],"^V","Dissociates an entry from a nested associative structure returning a new nested structure. `keys` is a sequence of keys. Any empty maps that result will not be present in the new structure. See [assoc-in](https://clojuredocs.org/clojure.core/assoc-in)\n\n~~~klipse\n  (dissoc-in {:a 1 :b 2} [:b])\n~~~\n\n~~~klipse\n  (dissoc-in {:a {:b 2 :B 3} :c 3} [:a :b])\n~~~\n\n~~~klipse\n  (dissoc-in {:a {:b 2} :c 3} [:a :b])\n~~~\n  "],"^B","~$gadjett.collections/dissoc-in","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",16,"^Y",["^T",[["~$m","~$p__133788"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",340,"^Q",340,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["~$m",["~$k","~$&","^1:","^1;","^1<"]]]]]],"^V","Dissociates an entry from a nested associative structure returning a new nested structure. `keys` is a sequence of keys. Any empty maps that result will not be present in the new structure. See [assoc-in](https://clojuredocs.org/clojure.core/assoc-in)\n\n~~~klipse\n  (dissoc-in {:a 1 :b 2} [:b])\n~~~\n\n~~~klipse\n  (dissoc-in {:a {:b 2 :B 3} :c 3} [:a :b])\n~~~\n\n~~~klipse\n  (dissoc-in {:a {:b 2} :c 3} [:a :b])\n~~~\n  "],"~$split-by-predicate-positions",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",396,"^P",7,"^Q",396,"^R",35,"^S",["^T",["^U",["^T",[["~$coll","~$pred","~$n","~$d"]]]]],"^V","\n  Optimized version of `split-by-predicate` where we assume that the data is from a signal that we can sample.\n\n  Instead of checking each element, we check 1 over `n` elements.\n\n We return the positions where the data splits.\n\n~~~klipse\n  (let [data (map Math/sin (range 0 6.28 0.001))]\n    (split-by-predicate-positions data #(<= -0.01 % 0.01) 2 10))\n~~~\n\n  The following assertion holds:\n\n~~~clojure\n  (= (split-by-predicate coll pred n)\n     (map #(apply subsequence data %) (split-by-predicate-positions coll pred n 1)))\n~~~\n\n  Here is an example:\n\n~~~klipse\n  (let [data (map Math/sin (range 0 6.28 0.01))]\n    (= (split-by-predicate data #(<= -0.01 % 0.01) 2)\n       (map #(apply subsequence data %) (split-by-predicate-positions data #(<= -0.01 % 0.01) 2 1))))\n~~~\n  "],"^B","~$gadjett.collections/split-by-predicate-positions","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",35,"^Y",["^T",[["^1@","^1A","~$n","~$d"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",396,"^Q",396,"^10",4,"^11",true,"^S",["^T",["^U",["^T",[["^1@","^1A","~$n","~$d"]]]]],"^V","\n  Optimized version of `split-by-predicate` where we assume that the data is from a signal that we can sample.\n\n  Instead of checking each element, we check 1 over `n` elements.\n\n We return the positions where the data splits.\n\n~~~klipse\n  (let [data (map Math/sin (range 0 6.28 0.001))]\n    (split-by-predicate-positions data #(<= -0.01 % 0.01) 2 10))\n~~~\n\n  The following assertion holds:\n\n~~~clojure\n  (= (split-by-predicate coll pred n)\n     (map #(apply subsequence data %) (split-by-predicate-positions coll pred n 1)))\n~~~\n\n  Here is an example:\n\n~~~klipse\n  (let [data (map Math/sin (range 0 6.28 0.01))]\n    (= (split-by-predicate data #(<= -0.01 % 0.01) 2)\n       (map #(apply subsequence data %) (split-by-predicate-positions data #(<= -0.01 % 0.01) 2 1))))\n~~~\n  "],"~$mapify",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",317,"^P",7,"^Q",317,"^R",13,"^S",["^T",["^U",["^T",[["~$f","~$s"]]]]],"^V","\n  Takes a seq, and returns a map where the keys are the result of applying f to the elements in the seq.\n  The result of f should be unique for each element in the seq, otherwise you will loose some data.\n  If it is not unique, consider using [group-by](https://clojuredocs.org/clojure.core/group-by).\n\n~~~klipse\n  (mapify inc (range 5) )\n~~~\n  "],"^B","~$gadjett.collections/mapify","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",13,"^Y",["^T",[["~$f","~$s"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",317,"^Q",317,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["~$f","~$s"]]]]],"^V","\n  Takes a seq, and returns a map where the keys are the result of applying f to the elements in the seq.\n  The result of f should be unique for each element in the seq, otherwise you will loose some data.\n  If it is not unique, consider using [group-by](https://clojuredocs.org/clojure.core/group-by).\n\n~~~klipse\n  (mapify inc (range 5) )\n~~~\n  "],"~$submap?",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",429,"^P",7,"^Q",429,"^R",14,"^S",["^T",["^U",["^T",[["~$m1","~$m2"]]]]],"^V","Checks if `m1` is a submap of `m2`.\n  Map `m1` is a submap of `m2` if all key/value pairs in `m1` exist in `m2`.\n\n~~~klipse\n  (submap? {:a 1} {:a 1 :b 2})\n~~~\n\n~~~klipse\n  (submap? {:a 1} {:a 1 :b 2 :c nil})\n~~~\n  "],"^B","~$gadjett.collections/submap?","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",14,"^Y",["^T",[["^1F","^1G"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",429,"^Q",429,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["^1F","^1G"]]]]],"^V","Checks if `m1` is a submap of `m2`.\n  Map `m1` is a submap of `m2` if all key/value pairs in `m1` exist in `m2`.\n\n~~~klipse\n  (submap? {:a 1} {:a 1 :b 2})\n~~~\n\n~~~klipse\n  (submap? {:a 1} {:a 1 :b 2 :c nil})\n~~~\n  "],"~$positions",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",365,"^P",7,"^Q",365,"^R",16,"^S",["^T",["^U",["^T",[["~$coll-of-lengths","~$&",["^ ","~:keys",["~$max-val","~$first-val"],"~:or",["^ ","^1L","~$infinity","^1M",0]]]]]]],"^V","Receives a collection of lengths and returns a list of start and end positions. Options:\n  * `max-val`: (default `infinity`) - max value for `end`\n  * `first-val`: (default 0) - first value of `start`\n\n~~~klipse\n  (positions '(10 10 20) :first-val 100 :max-val 137)\n~~~\n\n  ","~:top-fn",["^ ","^X",true,"^10",1,"^Y",[["^T",["^1J",["^ ","^1K",["^1L","^1M"],"^1N",["^ ","^1L","^1O","^1M",0]]]]],"^S",["^T",[["^1J","~$&",["^ ","^1K",["^1L","^1M"],"^1N",["^ ","^1L","^1O","^1M",0]]]]],"^[",["^T",[null]]]],"^B","~$gadjett.collections/positions","^X",true,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",16,"^1P",["^ ","^X",true,"^10",1,"^Y",[["^T",["^1J",["^ ","^1K",["^1L","^1M"],"^1N",["^ ","^1L","^1O","^1M",0]]]]],"^S",["^T",[["^1J","~$&",["^ ","^1K",["^1L","^1M"],"^1N",["^ ","^1L","^1O","^1M",0]]]]],"^[",["^T",[null]]],"^Y",[["^T",["^1J",["^ ","^1K",["^1L","^1M"],"^1N",["^ ","^1L","^1O","^1M",0]]]]],"^Z",null,"^[",["^T",[null]],"^P",1,"^O",365,"^Q",365,"^10",1,"^11",true,"^S",["^T",[["^1J","~$&",["^ ","^1K",["^1L","^1M"],"^1N",["^ ","^1L","^1O","^1M",0]]]]],"^V","Receives a collection of lengths and returns a list of start and end positions. Options:\n  * `max-val`: (default `infinity`) - max value for `end`\n  * `first-val`: (default 0) - first value of `start`\n\n~~~klipse\n  (positions '(10 10 20) :first-val 100 :max-val 137)\n~~~\n\n  "],"~$filter-map",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",267,"^P",7,"^Q",267,"^R",17,"^S",["^T",["^U",["^T",[["~$f","~$m"]]]]],"^V","Run a function on the values of a map and keep only the (key, value) pairs for which the function returns true\n  \n~~~klipse\n  (filter-map even? {:a 1 :b 2 :c 3})\n~~~\n  "],"^B","~$gadjett.collections/filter-map","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",17,"^Y",["^T",[["~$f","~$m"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",267,"^Q",267,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["~$f","~$m"]]]]],"^V","Run a function on the values of a map and keep only the (key, value) pairs for which the function returns true\n  \n~~~klipse\n  (filter-map even? {:a 1 :b 2 :c 3})\n~~~\n  "],"~$vec->map",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",47,"^P",7,"^Q",47,"^R",15,"^S",["^T",["^U",["^T",[["~$vec"]]]]],"^V","Converts a 2d vec to a hash-map.\n\n~~~klipse\n   (vec->map [[:a 1] [:b 2]])\n~~~\n   "],"^B","~$gadjett.collections/vec->map","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",15,"^Y",["^T",[["^1U"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",47,"^Q",47,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["^1U"]]]]],"^V","Converts a 2d vec to a hash-map.\n\n~~~klipse\n   (vec->map [[:a 1] [:b 2]])\n~~~\n   "],"~$assoc-cyclic",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",205,"^P",7,"^Q",205,"^R",19,"^S",["^T",["^U",["^T",[["^1@","~$k","~$v"],["^1@","~$k","~$v","~$n"]]]]],"^V","Assoc a key-value pair to a map popping out an element of the map.\n  If the key already exists, no element is popped out.\n  If `n` is supplied, no elmement is popped out if the map has less than `n` entries.\n\n~~~klipse\n  (-> {:a 1 :b 2 :c 3}\n      (assoc-cyclic :d 4)\n      (assoc-cyclic :e 5)\n      (assoc-cyclic :f 6)\n      (assoc-cyclic :g 7))\n~~~\n  ","^1P",["^ ","^X",false,"^10",4,"^Y",["^T",[["^1@","~$k","~$v"],["^1@","~$k","~$v","~$n"]]],"^S",["^T",[["^1@","~$k","~$v"],["^1@","~$k","~$v","~$n"]]],"^[",["^T",[null,null]]]],"^B","~$gadjett.collections/assoc-cyclic","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",19,"^1P",["^ ","^X",false,"^10",4,"^Y",["^T",[["^1@","~$k","~$v"],["^1@","~$k","~$v","~$n"]]],"^S",["^T",[["^1@","~$k","~$v"],["^1@","~$k","~$v","~$n"]]],"^[",["^T",[null,null]]],"^Y",["^T",[["^1@","~$k","~$v"],["^1@","~$k","~$v","~$n"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",205,"^Q",205,"^10",4,"^11",true,"^S",["^T",[["^1@","~$k","~$v"],["^1@","~$k","~$v","~$n"]]],"^V","Assoc a key-value pair to a map popping out an element of the map.\n  If the key already exists, no element is popped out.\n  If `n` is supplied, no elmement is popped out if the map has less than `n` entries.\n\n~~~klipse\n  (-> {:a 1 :b 2 :c 3}\n      (assoc-cyclic :d 4)\n      (assoc-cyclic :e 5)\n      (assoc-cyclic :f 6)\n      (assoc-cyclic :g 7))\n~~~\n  "],"^1O",["^ ","^B","~$gadjett.collections/infinity","^N","target/public/cljs-out/dev/gadjett/collections.cljc","^O",7,"^P",1,"^Q",7,"^R",14,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",7,"^P",6,"^Q",7,"^R",14],"~:tag","~$js"],"~$subsequence",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",444,"^P",7,"^Q",444,"^R",18,"^S",["^T",["^U",["^T",[["^1@","~$start","~$end"]]]]],"^V","\n  Returns a lazy subsequence of `coll`, starting at `start, ending at `end` (not included).\n\n~~~klipse\n  (subsequence (range) 10 20)\n~~~\n  "],"^B","~$gadjett.collections/subsequence","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",18,"^Y",["^T",[["^1@","^21","^22"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",444,"^Q",444,"^10",3,"^11",true,"^S",["^T",["^U",["^T",[["^1@","^21","^22"]]]]],"^V","\n  Returns a lazy subsequence of `coll`, starting at `start, ending at `end` (not included).\n\n~~~klipse\n  (subsequence (range) 10 20)\n~~~\n  "],"~$edn-zip",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",625,"^P",7,"^Q",625,"^R",14,"^S",["^T",["^U",["^T",[["~$root"]]]]],"^V","A zipper for `edn`.\n\n~~~klipse\n  (edn-zip {:a {:b 1}, :c {:e 4, :d 2, :f {:g 8}}})\n~~~\n  "],"^B","~$gadjett.collections/edn-zip","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",14,"^Y",["^T",[["^25"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",625,"^Q",625,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["^25"]]]]],"^V","A zipper for `edn`.\n\n~~~klipse\n  (edn-zip {:a {:b 1}, :c {:e 4, :d 2, :f {:g 8}}})\n~~~\n  "],"~$fix-blank-lines",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",691,"^P",7,"^Q",691,"^R",22,"^S",["^T",["^U",["^T",[["~$s"]]]]],"^V","Removes blank lines from the begining and from the end (not from the middle)\n\n~~~klipse\n  ; we use (char 10) for end-of-line due to technical issues with string manipulation with `codox`\n  (let [lines (clojure.string/join (char 10) [\"  \", \"aa\", \"  \", \"bb\", \" \t  \"])]\n  (fix-blank-lines lines))\n~~~\n  "],"^B","~$gadjett.collections/fix-blank-lines","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",22,"^Y",["^T",[["~$s"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",691,"^Q",691,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["~$s"]]]]],"^V","Removes blank lines from the begining and from the end (not from the middle)\n\n~~~klipse\n  ; we use (char 10) for end-of-line due to technical issues with string manipulation with `codox`\n  (let [lines (clojure.string/join (char 10) [\"  \", \"aa\", \"  \", \"bb\", \" \t  \"])]\n  (fix-blank-lines lines))\n~~~\n  "],"~$map-to-object",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",307,"^P",7,"^Q",307,"^R",20,"^S",["^T",["^U",["^T",[["~$f","~$lst"]]]]],"^V","Returns a map whose keys are the elements of `lst` and values are mapped by `f`.\n\n~~~klipse\n  (map-to-object inc (range 5))\n~~~\n  "],"^B","~$gadjett.collections/map-to-object","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",20,"^Y",["^T",[["~$f","^2:"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",307,"^Q",307,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["~$f","^2:"]]]]],"^V","Returns a map whose keys are the elements of `lst` and values are mapped by `f`.\n\n~~~klipse\n  (map-to-object inc (range 5))\n~~~\n  "],"~$deep-merge",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",524,"^P",7,"^Q",524,"^R",17,"^S",["^T",["^U",["^T",[["~$&","~$maps"]]]]],"^V"," Deep merges maps.\n\n~~~klipse\n(deep-merge {} {:a {:b 1}, :c {:e 4, :d 2, :f {:g 8}}} {:a {:b 1}, :c {:e 4, :d 2000, :f {:g 9000}}})\n~~~\n","^1P",["^ ","^X",true,"^10",0,"^Y",[["^T",["^2="]]],"^S",["^T",[["~$&","^2="]]],"^[",["^T",[null]]]],"^B","~$gadjett.collections/deep-merge","^X",true,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",17,"^1P",["^ ","^X",true,"^10",0,"^Y",[["^T",["^2="]]],"^S",["^T",[["~$&","^2="]]],"^[",["^T",[null]]],"^Y",[["^T",["^2="]]],"^Z",null,"^[",["^T",[null]],"^P",1,"^O",524,"^Q",524,"^10",0,"^11",true,"^S",["^T",[["~$&","^2="]]],"^V"," Deep merges maps.\n\n~~~klipse\n(deep-merge {} {:a {:b 1}, :c {:e 4, :d 2, :f {:g 8}}} {:a {:b 1}, :c {:e 4, :d 2000, :f {:g 9000}}})\n~~~\n"],"~$mean",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",124,"^P",7,"^Q",124,"^R",11,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^V","Calculates the mean (a.k.a average) of a sequence of numbers.\n\n~~~klipse\n  (mean [1 2 10 -1 12.3])\n~~~\n  "],"^B","~$gadjett.collections/mean","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",11,"^Y",["^T",[["~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",124,"^Q",124,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^V","Calculates the mean (a.k.a average) of a sequence of numbers.\n\n~~~klipse\n  (mean [1 2 10 -1 12.3])\n~~~\n  "],"~$loc-my-replace",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",650,"^P",8,"^Q",650,"^R",22,"~:private",true,"^S",["^T",["^U",["^T",[["~$smap","~$loc"]]]]]],"^2B",true,"^B","~$gadjett.collections/loc-my-replace","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",22,"^Y",["^T",[["^2C","^2D"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",650,"^Q",650,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["^2C","^2D"]]]]]],"~$map-object-kv",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",100,"^P",7,"^Q",100,"^R",20,"^S",["^T",["^U",["^T",[["~$fk","~$fv","~$m"]]]]],"^V","Returns a map with the keys mapped by `fk` and the values mapped by `fv`.\n\n~~~klipse\n    (map-object-kv name inc {:a 1 :b 2 :c 3})\n~~~\n"],"^B","~$gadjett.collections/map-object-kv","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",20,"^Y",["^T",[["^2G","^2H","~$m"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",100,"^Q",100,"^10",3,"^11",true,"^S",["^T",["^U",["^T",[["^2G","^2H","~$m"]]]]],"^V","Returns a map with the keys mapped by `fk` and the values mapped by `fv`.\n\n~~~klipse\n    (map-object-kv name inc {:a 1 :b 2 :c 3})\n~~~\n"],"~$compactize-map-recursive",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",251,"^P",7,"^Q",251,"^R",31,"^S",["^T",["^U",["^T",[["~$m"]]]]],"^V","Remove from a map the entries whose values are `nil`.\n  If all the values of a nested map are `nil` the entrie is removed.\n~~~klipse\n\n(compactize-map-recursive {:x 1 :z {:a nil} :a {:b nil :c 2 :d {:e nil :f 2}}})\n~~~\n  "],"^B","~$gadjett.collections/compactize-map-recursive","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",31,"^Y",["^T",[["~$m"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",251,"^Q",251,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["~$m"]]]]],"^V","Remove from a map the entries whose values are `nil`.\n  If all the values of a nested map are `nil` the entrie is removed.\n~~~klipse\n\n(compactize-map-recursive {:x 1 :z {:a nil} :a {:b nil :c 2 :d {:e nil :f 2}}})\n~~~\n  "],"~$flatten-keys",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",474,"^P",7,"^Q",474,"^R",19,"^S",["^T",["^U",["^T",[["~$m"]]]]],"^V","\nFlatten the keys of a nested map.\nThanks to [Jay Fields](http://blog.jayfields.com/2010/09/clojure-flatten-keys.html)\n\n~~~klipse\n(flatten-keys {:a {:b 1} :c {:d 2 :e 4 :f {:g 8}}})\n~~~\n"],"^B","~$gadjett.collections/flatten-keys","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",19,"^Y",["^T",[["~$m"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",474,"^Q",474,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["~$m"]]]]],"^V","\nFlatten the keys of a nested map.\nThanks to [Jay Fields](http://blog.jayfields.com/2010/09/clojure-flatten-keys.html)\n\n~~~klipse\n(flatten-keys {:a {:b 1} :c {:d 2 :e 4 :f {:g 8}}})\n~~~\n"],"~$scale",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",21,"^P",8,"^Q",21,"^R",13,"^2B",true,"^S",["^T",["^U",["^T",[["~$x","~$y"]]]]]],"^2B",true,"^B","~$gadjett.collections/scale","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",13,"^Y",["^T",[["~$x","~$y"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",21,"^Q",21,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["~$x","~$y"]]]]]],"~$flatten-keys*",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",467,"^P",8,"^Q",467,"^R",21,"^2B",true,"^S",["^T",["^U",["^T",[["~$a","^1:","~$m"]]]]]],"^2B",true,"^B","~$gadjett.collections/flatten-keys*","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",21,"^Y",["^T",[["~$a","^1:","~$m"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",467,"^Q",467,"^10",3,"^11",true,"^S",["^T",["^U",["^T",[["~$a","^1:","~$m"]]]]]],"~$almost=",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",26,"^P",7,"^Q",26,"^R",14,"^S",["^T",["^U",["^T",[["~$x","~$y"],["~$x","~$y","~$epsilon"]]]]],"^1P",["^ ","^X",false,"^10",3,"^Y",["^T",[["~$x","~$y"],["~$x","~$y","^2S"]]],"^S",["^T",[["~$x","~$y"],["~$x","~$y","^2S"]]],"^[",["^T",[null,null]]]],"^B","~$gadjett.collections/almost=","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",14,"^1P",["^ ","^X",false,"^10",3,"^Y",["^T",[["~$x","~$y"],["~$x","~$y","^2S"]]],"^S",["^T",[["~$x","~$y"],["~$x","~$y","^2S"]]],"^[",["^T",[null,null]]],"^Y",["^T",[["~$x","~$y"],["~$x","~$y","^2S"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",26,"^Q",26,"^10",3,"^11",true,"^S",["^T",[["~$x","~$y"],["~$x","~$y","^2S"]]]],"~$compactize-map",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",239,"^P",7,"^Q",239,"^R",21,"^S",["^T",["^U",["^T",[["~$m"]]]]],"^V","Removes entries with `nil` values.\n\n~~~klipse\n  (compactize-map {:a 1 :b nil :c 3})\n~~~\n  "],"^B","~$gadjett.collections/compactize-map","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",21,"^Y",["^T",[["~$m"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",239,"^Q",239,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["~$m"]]]]],"^V","Removes entries with `nil` values.\n\n~~~klipse\n  (compactize-map {:a 1 :b nil :c 3})\n~~~\n  "],"~$partition-between",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",595,"^P",7,"^Q",595,"^R",24,"^S",["^T",["^U",["^T",[["^1A","^1@"]]]]],"^V","Splits a collection between two items according to predicate `pred` - which means split the sequence on breaking point.\n\n  See: [here](http://stackoverflow.com/questions/23207490/partition-a-seq-by-a-windowing-predicate-in-clojure)\n\n  For instance, split each time the series stop being ascending:\n\n~~~klipse\n(partition-between > [1 2 4 9 8 7 6 5 1 2 4 5 11])\n~~~\n"],"^B","~$gadjett.collections/partition-between","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",24,"^Y",["^T",[["^1A","^1@"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",595,"^Q",595,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["^1A","^1@"]]]]],"^V","Splits a collection between two items according to predicate `pred` - which means split the sequence on breaking point.\n\n  See: [here](http://stackoverflow.com/questions/23207490/partition-a-seq-by-a-windowing-predicate-in-clojure)\n\n  For instance, split each time the series stop being ascending:\n\n~~~klipse\n(partition-between > [1 2 4 9 8 7 6 5 1 2 4 5 11])\n~~~\n"],"~$take-from-map",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",496,"^P",7,"^Q",496,"^R",20,"^S",["^T",["^U",["^T",[["~$n","~$m"]]]]],"^V","Creates a map with n leaves which are nested values of m.\n  The following assertion holds:\n\n~~~clojure\n      (>= n (count (flatten-keys (take-from-map n m)))))))\n~~~\n\n~~~klipse\n  (take-from-map 3 {:a {:b 1}, :c {:e 4, :d 2, :f {:g 8}}})\n~~~\n  "],"^B","~$gadjett.collections/take-from-map","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",20,"^Y",["^T",[["~$n","~$m"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",496,"^Q",496,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["~$n","~$m"]]]]],"^V","Creates a map with n leaves which are nested values of m.\n  The following assertion holds:\n\n~~~clojure\n      (>= n (count (flatten-keys (take-from-map n m)))))))\n~~~\n\n~~~klipse\n  (take-from-map 3 {:a {:b 1}, :c {:e 4, :d 2, :f {:g 8}}})\n~~~\n  "],"~$map-nested-vals",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",760,"^P",7,"^Q",760,"^R",22,"^S",["^T",["^U",["^T",[["~$f","~$m"]]]]],"^V","Map the values of a nested map.\n~~~klipse\n  (map-nested-vals first {:a [1 2 3]\n                          :b {:c [4 5 6]}})\n~~~\n  "],"^B","~$gadjett.collections/map-nested-vals","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",22,"^Y",["^T",[["~$f","~$m"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",760,"^Q",760,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["~$f","~$m"]]]]],"^V","Map the values of a nested map.\n~~~klipse\n  (map-nested-vals first {:a [1 2 3]\n                          :b {:c [4 5 6]}})\n~~~\n  "],"~$compact",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",724,"^P",11,"^Q",724,"^R",18,"^S",["^T",["^U",["^T",[["~$x","~$&",["^ ","^1K",["~$max-elements-in-coll","~$max-chars-in-str"],"^1N",["^ ","^32",10,"^33",20],"^1;","~$args"]]]]]],"^V","\n(clojurescript only)\n\nCompacts an expression by taking only the first `max-elements-in-coll` from collections and first `max-chars-in-str` from strings. Functions are displayed as \"lambda()\".\n\nIt works recursively. It is useful for logging and reporting.\n\nDefault settings:\n\n- `max-elements-in-coll` 10\n- `max-chars-in-str` 20\n\n~~~klipse\n(compact {:infinite-list (range)\n          :long-str \"a very very very very long string - too long to be true\"\n                                                      :long-map (zipmap (range 100) (range 100))\n                                                        :function #(+ 1 2)})\n~~~\n                  ","^1P",["^ ","^X",true,"^10",1,"^Y",[["^T",["~$x",["^ ","^1K",["^32","^33"],"^1N",["^ ","^32",10,"^33",20],"^1;","^34"]]]],"^S",["^T",[["~$x","~$&",["^ ","^1K",["^32","^33"],"^1N",["^ ","^32",10,"^33",20],"^1;","^34"]]]],"^[",["^T",[null]]]],"^B","~$gadjett.collections/compact","^X",true,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",18,"^1P",["^ ","^X",true,"^10",1,"^Y",[["^T",["~$x",["^ ","^1K",["^32","^33"],"^1N",["^ ","^32",10,"^33",20],"^1;","^34"]]]],"^S",["^T",[["~$x","~$&",["^ ","^1K",["^32","^33"],"^1N",["^ ","^32",10,"^33",20],"^1;","^34"]]]],"^[",["^T",[null]]],"^Y",[["^T",["~$x",["^ ","^1K",["^32","^33"],"^1N",["^ ","^32",10,"^33",20],"^1;","^34"]]]],"^Z",null,"^[",["^T",[null]],"^P",5,"^O",724,"^Q",724,"^10",1,"^11",true,"^S",["^T",[["~$x","~$&",["^ ","^1K",["^32","^33"],"^1N",["^ ","^32",10,"^33",20],"^1;","^34"]]]],"^V","\n(clojurescript only)\n\nCompacts an expression by taking only the first `max-elements-in-coll` from collections and first `max-chars-in-str` from strings. Functions are displayed as \"lambda()\".\n\nIt works recursively. It is useful for logging and reporting.\n\nDefault settings:\n\n- `max-elements-in-coll` 10\n- `max-chars-in-str` 20\n\n~~~klipse\n(compact {:infinite-list (range)\n          :long-str \"a very very very very long string - too long to be true\"\n                                                      :long-map (zipmap (range 100) (range 100))\n                                                        :function #(+ 1 2)})\n~~~\n                  "],"~$substr",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",790,"^P",7,"^Q",790,"^R",13,"^S",["^T",["^U",["^T",[["~$s","^21"],["~$s","^21","^22"]]]]],"^V","Like clojure.core/subs but prevents some exceptions when the `start` or `end` are out of bound.\n~~~klipse\n  (subs \"\" -2)\n~~~\n\n  ","^1P",["^ ","^X",false,"^10",3,"^Y",["^T",[["~$s","^21"],["~$s","^21","^22"]]],"^S",["^T",[["~$s","^21"],["~$s","^21","^22"]]],"^[",["^T",[null,null]]]],"^B","~$gadjett.collections/substr","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",13,"^1P",["^ ","^X",false,"^10",3,"^Y",["^T",[["~$s","^21"],["~$s","^21","^22"]]],"^S",["^T",[["~$s","^21"],["~$s","^21","^22"]]],"^[",["^T",[null,null]]],"^Y",["^T",[["~$s","^21"],["~$s","^21","^22"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",790,"^Q",790,"^10",3,"^11",true,"^S",["^T",[["~$s","^21"],["~$s","^21","^22"]]],"^V","Like clojure.core/subs but prevents some exceptions when the `start` or `end` are out of bound.\n~~~klipse\n  (subs \"\" -2)\n~~~\n\n  "],"~$map-with-index",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",330,"^P",7,"^Q",330,"^R",21,"^S",["^T",["^U",["^T",[["~$s","~$idx-key","~$val-key"]]]]],"^V","Maps a sequence to a sequence of maps with index and value\n\n~~~klipse\n      (map-with-index [10 20 30] :idx :val)\n~~~\n  "],"^B","~$gadjett.collections/map-with-index","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",21,"^Y",["^T",[["~$s","^39","^3:"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",330,"^Q",330,"^10",3,"^11",true,"^S",["^T",["^U",["^T",[["~$s","^39","^3:"]]]]],"^V","Maps a sequence to a sequence of maps with index and value\n\n~~~klipse\n      (map-with-index [10 20 30] :idx :val)\n~~~\n  "],"~$map-object-with-key",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",90,"^P",7,"^Q",90,"^R",26,"^S",["^T",["^U",["^T",[["~$f","~$m"]]]]],"^V","Returns a map with the same keys as `m` and with the values transformed by `f`. `f` must be a `2-ary` function that receives the key and the value as arguments.\n\n~~~klipse\n  (map-object-with-key list {:a 1 :b 2 :c 3})\n~~~\n  "],"^B","~$gadjett.collections/map-object-with-key","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",26,"^Y",["^T",[["~$f","~$m"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",90,"^Q",90,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["~$f","~$m"]]]]],"^V","Returns a map with the same keys as `m` and with the values transformed by `f`. `f` must be a `2-ary` function that receives the key and the value as arguments.\n\n~~~klipse\n  (map-object-with-key list {:a 1 :b 2 :c 3})\n~~~\n  "],"~$deep-merge*",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",515,"^P",8,"^Q",515,"^R",19,"^2B",true,"^S",["^T",["^U",["^T",[["~$&","^2="]]]]],"^1P",["^ ","^X",true,"^10",0,"^Y",[["^T",["^2="]]],"^S",["^T",[["~$&","^2="]]],"^[",["^T",[null]]]],"^2B",true,"^B","~$gadjett.collections/deep-merge*","^X",true,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",19,"^1P",["^ ","^X",true,"^10",0,"^Y",[["^T",["^2="]]],"^S",["^T",[["~$&","^2="]]],"^[",["^T",[null]]],"^Y",[["^T",["^2="]]],"^Z",null,"^[",["^T",[null]],"^P",1,"^O",515,"^Q",515,"^10",0,"^11",true,"^S",["^T",[["~$&","^2="]]]],"~$range-till-end",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",169,"^P",7,"^Q",169,"^R",21,"^S",["^T",["^U",["^T",[["~$&","^34"]]]]],"^V","Like `range` but including the `end`.\n\n~~~klipse\n  (range-till-end 10)\n~~~\n\n~~~klipse\n(range-till-end 10 18)\n~~~\n\n~~~klipse\n(range-till-end 10 100 5)\n~~~\n\n  ","^1P",["^ ","^X",true,"^10",0,"^Y",[["^T",["^34"]]],"^S",["^T",[["~$&","^34"]]],"^[",["^T",[null]]]],"^B","~$gadjett.collections/range-till-end","^X",true,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",21,"^1P",["^ ","^X",true,"^10",0,"^Y",[["^T",["^34"]]],"^S",["^T",[["~$&","^34"]]],"^[",["^T",[null]]],"^Y",[["^T",["^34"]]],"^Z",null,"^[",["^T",[null]],"^P",1,"^O",169,"^Q",169,"^10",0,"^11",true,"^S",["^T",[["~$&","^34"]]],"^V","Like `range` but including the `end`.\n\n~~~klipse\n  (range-till-end 10)\n~~~\n\n~~~klipse\n(range-till-end 10 18)\n~~~\n\n~~~klipse\n(range-till-end 10 100 5)\n~~~\n\n  "],"~$nearest-of-seq",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",294,"^P",7,"^Q",294,"^R",21,"^S",["^T",["^U",["^T",[["~$a","~$b"]]]]],"^V","Maps each element of `b` to its nearest element in `a`.\n  If `a` is empty, returns `b`.\n\n~~~klipse\n  (nearest-of-seq (range 5) [1.2 3.4 4])\n~~~\n  "],"^B","~$gadjett.collections/nearest-of-seq","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",21,"^Y",["^T",[["~$a","~$b"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",294,"^Q",294,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["~$a","~$b"]]]]],"^V","Maps each element of `b` to its nearest element in `a`.\n  If `a` is empty, returns `b`.\n\n~~~klipse\n  (nearest-of-seq (range 5) [1.2 3.4 4])\n~~~\n  "],"~$range-with-end",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",164,"^P",8,"^Q",164,"^R",22,"^2B",true,"^S",["^T",["^U",["^T",[["^22"],["^21","^22"],["^21","^22","~$steps"]]]]],"^1P",["^ ","^X",false,"^10",3,"^Y",["^T",[["^22"],["^21","^22"],["^21","^22","^3E"]]],"^S",["^T",[["^22"],["^21","^22"],["^21","^22","^3E"]]],"^[",["^T",[null,null,null]]]],"^2B",true,"^B","~$gadjett.collections/range-with-end","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",22,"^1P",["^ ","^X",false,"^10",3,"^Y",["^T",[["^22"],["^21","^22"],["^21","^22","^3E"]]],"^S",["^T",[["^22"],["^21","^22"],["^21","^22","^3E"]]],"^[",["^T",[null,null,null]]],"^Y",["^T",[["^22"],["^21","^22"],["^21","^22","^3E"]]],"^Z",null,"^[",["^T",[null,null,null]],"^P",1,"^O",164,"^Q",164,"^10",3,"^11",true,"^S",["^T",[["^22"],["^21","^22"],["^21","^22","^3E"]]]],"~$branches-and-leaves",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",559,"^P",7,"^Q",559,"^R",26,"^S",["^T",["^U",["^T",[["~$m"]]]]],"^V","Returns all branches and leaves off a nested map object.\n\n~~~klipse\n(branches-and-leaves {:a {:b 1 :c {:d 2}} :e 3})\n~~~\n  "],"^B","~$gadjett.collections/branches-and-leaves","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",26,"^Y",["^T",[["~$m"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",559,"^Q",559,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["~$m"]]]]],"^V","Returns all branches and leaves off a nested map object.\n\n~~~klipse\n(branches-and-leaves {:a {:b 1 :c {:d 2}} :e 3})\n~~~\n  "],"~$deep-merge-with",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",545,"^P",7,"^Q",545,"^R",22,"^S",["^T",["^U",["^T",[["~$g","~$&","^2="]]]]],"^V","Like merge-with but deep.\n~~~klipse\n(deep-merge-with concat\n                 {:x {:b [1]\n                      :a [1]}}\n                 {:x {:a [3 4]}})\n~~~\n","^1P",["^ ","^X",true,"^10",1,"^Y",[["^T",["~$g","^2="]]],"^S",["^T",[["~$g","~$&","^2="]]],"^[",["^T",[null]]]],"^B","~$gadjett.collections/deep-merge-with","^X",true,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",22,"^1P",["^ ","^X",true,"^10",1,"^Y",[["^T",["~$g","^2="]]],"^S",["^T",[["~$g","~$&","^2="]]],"^[",["^T",[null]]],"^Y",[["^T",["~$g","^2="]]],"^Z",null,"^[",["^T",[null]],"^P",1,"^O",545,"^Q",545,"^10",1,"^11",true,"^S",["^T",[["~$g","~$&","^2="]]],"^V","Like merge-with but deep.\n~~~klipse\n(deep-merge-with concat\n                 {:x {:b [1]\n                      :a [1]}}\n                 {:x {:a [3 4]}})\n~~~\n"],"~$remove-blank-lines",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",709,"^P",7,"^Q",709,"^R",25,"^S",["^T",["^U",["^T",[["~$s"]]]]],"^V","Removes blank lines.\n~~~klipse\n  ; we use (char 10) for end-of-line due to technical issues with string manipulation with `codox`\n  (let [lines (clojure.string/join (char 10) [\"  \", \"aa\", \"  \", \"bb\", \" \t  \"])]\n  (remove-blank-lines lines))\n~~~\n  "],"^B","~$gadjett.collections/remove-blank-lines","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",25,"^Y",["^T",[["~$s"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",709,"^Q",709,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["~$s"]]]]],"^V","Removes blank lines.\n~~~klipse\n  ; we use (char 10) for end-of-line due to technical issues with string manipulation with `codox`\n  (let [lines (clojure.string/join (char 10) [\"  \", \"aa\", \"  \", \"bb\", \" \t  \"])]\n  (remove-blank-lines lines))\n~~~\n  "],"~$select-vals",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",809,"^P",7,"^Q",809,"^R",18,"^S",["^T",["^U",["^T",[["~$map","~$keyseq"]]]]]],"^B","~$gadjett.collections/select-vals","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",18,"^Y",["^T",[["^3N","^3O"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",809,"^Q",809,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["^3N","^3O"]]]]]],"~$sequence-of-maps->map",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",146,"^P",7,"^Q",146,"^R",28,"^S",["^T",["^U",["^T",[["^1@","~$key-fn","~$val-fn"]]]]],"^V","Converts a sequence of maps into a map where:\n\n  - the keys are extracted from the maps using `key-fn`\n  - the vals extracted from the maps using `val-fn`  \n  \n  ~~~klipse\n  (sequence-of-maps->map [{:key :price :value 19}\n                          {:key :quantity :value 100}]\n                          :key :value)\n  ~~~\n  "],"^B","~$gadjett.collections/sequence-of-maps->map","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",28,"^Y",["^T",[["^1@","^3R","^3S"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",146,"^Q",146,"^10",3,"^11",true,"^S",["^T",["^U",["^T",[["^1@","^3R","^3S"]]]]],"^V","Converts a sequence of maps into a map where:\n\n  - the keys are extracted from the maps using `key-fn`\n  - the vals extracted from the maps using `val-fn`  \n  \n  ~~~klipse\n  (sequence-of-maps->map [{:key :price :value 19}\n                          {:key :quantity :value 100}]\n                          :key :value)\n  ~~~\n  "],"~$filter-branches",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",573,"^P",7,"^Q",573,"^R",22,"^S",["^T",["^U",["^T",[["~$m","~$p"]]]]],"^V","Filters branches of a (nested) map `m` according to a predicate `m`.\n\n~~~klipse\n(filter-branches {:x {:id 19 :b 1 :c {:id 2}} :e 3} :id)\n~~~\n  "],"^B","~$gadjett.collections/filter-branches","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",22,"^Y",["^T",[["~$m","~$p"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",573,"^Q",573,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["~$m","~$p"]]]]],"^V","Filters branches of a (nested) map `m` according to a predicate `m`.\n\n~~~klipse\n(filter-branches {:x {:id 19 :b 1 :c {:id 2}} :e 3} :id)\n~~~\n  "],"~$select-keys-in-order",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",804,"^P",7,"^Q",804,"^R",27,"^S",["^T",["^U",["^T",[["~$m","^3O"]]]]],"^V","Thanks [Jay Fields](http://blog.jayfields.com/2011/01/clojure-select-keys-select-values-and.html)"],"^B","~$gadjett.collections/select-keys-in-order","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",27,"^Y",["^T",[["~$m","^3O"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",804,"^Q",804,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["~$m","^3O"]]]]],"^V","Thanks [Jay Fields](http://blog.jayfields.com/2011/01/clojure-select-keys-select-values-and.html)"],"~$comment?",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",672,"^P",8,"^Q",672,"^R",16,"^2B",true,"^S",["^T",["^U",["^T",[["~$s"]]]]]],"^2B",true,"^B","~$gadjett.collections/comment?","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",16,"^Y",["^T",[["~$s"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",672,"^Q",672,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["~$s"]]]]]],"~$out-of-bound?",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",585,"^P",7,"^Q",585,"^R",20,"^S",["^T",["^U",["^T",[["~$v","~$idx"]]]]],"^V","Checks if index `idx` is in range of vector `v`. More efficient than `(get v idx)`\n\n~~~klipse\n    (map #(out-of-bound? [1 2 3] %) [-1 0 1 2 3 4])\n~~~\n  "],"^B","~$gadjett.collections/out-of-bound?","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",20,"^Y",["^T",[["~$v","^40"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",585,"^Q",585,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["~$v","^40"]]]]],"^V","Checks if index `idx` is in range of vector `v`. More efficient than `(get v idx)`\n\n~~~klipse\n    (map #(out-of-bound? [1 2 3] %) [-1 0 1 2 3 4])\n~~~\n  "],"~$map-2d-vec",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",57,"^P",7,"^Q",57,"^R",17,"^S",["^T",["^U",["^T",[["~$f","~$m"]]]]],"^V","Maps the values of a `2D` vector where each element of the vector is a key-value pair.\n`f` is a `1-ary` function that receives the key.\n\n~~~klipse\n  (map-2d-vec inc [[:a 1] [:b 2]])\n~~~\n"],"^B","~$gadjett.collections/map-2d-vec","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",17,"^Y",["^T",[["~$f","~$m"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",57,"^Q",57,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["~$f","~$m"]]]]],"^V","Maps the values of a `2D` vector where each element of the vector is a key-value pair.\n`f` is a `1-ary` function that receives the key.\n\n~~~klipse\n  (map-2d-vec inc [[:a 1] [:b 2]])\n~~~\n"],"~$split-by-predicate",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",380,"^P",7,"^Q",380,"^R",25,"^S",["^T",["^U",["^T",[["^1@","^1A","~$n"]]]]],"^V","Splits a collection to items where the separator is a repetition of at least n elements that satisfy `pred`.\n\n  Inspired by: [this question](http://stackoverflow.com/a/23555616/813665).\n\n~~~klipse\n  (split-by-predicate (shuffle (range 30)) even? 2)\n~~~\n  "],"^B","~$gadjett.collections/split-by-predicate","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",25,"^Y",["^T",[["^1@","^1A","~$n"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",380,"^Q",380,"^10",3,"^11",true,"^S",["^T",["^U",["^T",[["^1@","^1A","~$n"]]]]],"^V","Splits a collection to items where the separator is a repetition of at least n elements that satisfy `pred`.\n\n  Inspired by: [this question](http://stackoverflow.com/a/23555616/813665).\n\n~~~klipse\n  (split-by-predicate (shuffle (range 30)) even? 2)\n~~~\n  "],"~$abs",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",10,"^P",7,"^Q",10,"^R",10,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^V","Absolute value of a number\n\n~~~klipse\n  (map abs (range -5 5))\n~~~\n\n"],"^B","~$gadjett.collections/abs","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",10,"^Y",["^T",[["~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",10,"^Q",10,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^V","Absolute value of a number\n\n~~~klipse\n  (map abs (range -5 5))\n~~~\n\n"],"~$deep-merge-with*",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",536,"^P",8,"^Q",536,"^R",24,"^2B",true,"^S",["^T",["^U",["^T",[["~$g","~$&","^2="]]]]],"^1P",["^ ","^X",true,"^10",1,"^Y",[["^T",["~$g","^2="]]],"^S",["^T",[["~$g","~$&","^2="]]],"^[",["^T",[null]]]],"^2B",true,"^B","~$gadjett.collections/deep-merge-with*","^X",true,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",24,"^1P",["^ ","^X",true,"^10",1,"^Y",[["^T",["~$g","^2="]]],"^S",["^T",[["~$g","~$&","^2="]]],"^[",["^T",[null]]],"^Y",[["^T",["~$g","^2="]]],"^Z",null,"^[",["^T",[null]],"^P",1,"^O",536,"^Q",536,"^10",1,"^11",true,"^S",["^T",[["~$g","~$&","^2="]]]],"~$join-them",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",773,"^P",7,"^Q",773,"^R",16,"^S",["^T",["^U",["^T",[["~$fns","~$colls"]]]]],"^V","Join a sequence of collections `colls` according to function equality.\n   `fns` - a sequence of functions\n   `colls` - a sequence of collections\n~~~klipse\n(let [a [{:id 1 :price 19} {:id 2 :price 3}]\n        b [{:guid 1 :quantity 13}]]\n     (join-them [:id :guid] [a b]))\n~~~\n"],"^B","~$gadjett.collections/join-them","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",16,"^Y",["^T",[["^4;","^4<"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",773,"^Q",773,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["^4;","^4<"]]]]],"^V","Join a sequence of collections `colls` according to function equality.\n   `fns` - a sequence of functions\n   `colls` - a sequence of collections\n~~~klipse\n(let [a [{:id 1 :price 19} {:id 2 :price 3}]\n        b [{:guid 1 :quantity 13}]]\n     (join-them [:id :guid] [a b]))\n~~~\n"],"~$append-cyclic",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",189,"^P",7,"^Q",189,"^R",20,"^S",["^T",["^U",["^T",[["^2:","~$a"]]]]],"^V","Appends an element to a list popping out the first element.\n\n~~~klipse\n  (-> (repeat 3 nil)\n      (append-cyclic 1)\n      (append-cyclic 2)\n      (append-cyclic 3)\n      (append-cyclic 4))\n~~~\n  "],"^B","~$gadjett.collections/append-cyclic","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",20,"^Y",["^T",[["^2:","~$a"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",189,"^Q",189,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["^2:","~$a"]]]]],"^V","Appends an element to a list popping out the first element.\n\n~~~klipse\n  (-> (repeat 3 nil)\n      (append-cyclic 1)\n      (append-cyclic 2)\n      (append-cyclic 3)\n      (append-cyclic 4))\n~~~\n  "],"~$select-vals-in-order",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",812,"^P",7,"^Q",812,"^R",27,"^S",["^T",["^U",["^T",[["^3N","^1:"]]]]],"^V","Thanks [Jay Fields](http://blog.jayfields.com/2011/01/clojure-select-keys-select-values-and.html)"],"^B","~$gadjett.collections/select-vals-in-order","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",27,"^Y",["^T",[["^3N","^1:"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",812,"^Q",812,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["^3N","^1:"]]]]],"^V","Thanks [Jay Fields](http://blog.jayfields.com/2011/01/clojure-select-keys-select-values-and.html)"],"~$collify",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",611,"^P",7,"^Q",611,"^R",14,"^S",["^T",["^U",["^T",[["~$s"]]]]],"^V","Ensure `s` is a collection: if `s` is a collection returns it; otherwise returns (s)\n\n~~~klipse\n(collify 1)\n~~~\n\n~~~klipse\n(collify [1 2 3])\n~~~\n  "],"^B","~$gadjett.collections/collify","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",14,"^Y",["^T",[["~$s"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",611,"^Q",611,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["~$s"]]]]],"^V","Ensure `s` is a collection: if `s` is a collection returns it; otherwise returns (s)\n\n~~~klipse\n(collify 1)\n~~~\n\n~~~klipse\n(collify [1 2 3])\n~~~\n  "],"~$map-2d-vec-kv",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",68,"^P",7,"^Q",68,"^R",20,"^S",["^T",["^U",["^T",[["^2G","^2H","~$m"]]]]],"^V","Maps the values of a `2D` vector where each element of the vector is a key-value pair.\n`fk` is a `1-ary` function that receives the key.\n`fv` is a `1-ary` function that receives the value.\n\n~~~klipse\n    (map-2d-vec-kv name inc [[:a 1] [:b 2]])\n~~~\n"],"^B","~$gadjett.collections/map-2d-vec-kv","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",20,"^Y",["^T",[["^2G","^2H","~$m"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",68,"^Q",68,"^10",3,"^11",true,"^S",["^T",["^U",["^T",[["^2G","^2H","~$m"]]]]],"^V","Maps the values of a `2D` vector where each element of the vector is a key-value pair.\n`fk` is a `1-ary` function that receives the key.\n`fv` is a `1-ary` function that receives the value.\n\n~~~klipse\n    (map-2d-vec-kv name inc [[:a 1] [:b 2]])\n~~~\n"],"~$max-and-min",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",227,"^P",7,"^Q",227,"^R",18,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^V","Returns a couple of the `max` and the `min` of a sequence.\n\n~~~klipse\n  (max-and-min (range 5))\n~~~\n  "],"^B","~$gadjett.collections/max-and-min","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",18,"^Y",["^T",[["~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",227,"^Q",227,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^V","Returns a couple of the `max` and the `min` of a sequence.\n\n~~~klipse\n  (max-and-min (range 5))\n~~~\n  "],"~$index-of",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",456,"^P",7,"^Q",456,"^R",15,"^S",["^T",["^U",["^T",[["~$s","~$element"]]]]],"^V","Returns the index of an element in a sequence or `-1` if not present.\n\n  ~~~klipse\n  (index-of (range 100) 18)\n  ~~~\n  "],"^B","~$gadjett.collections/index-of","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",15,"^Y",["^T",[["~$s","^4I"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",456,"^Q",456,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["~$s","^4I"]]]]],"^V","Returns the index of an element in a sequence or `-1` if not present.\n\n  ~~~klipse\n  (index-of (range 100) 18)\n  ~~~\n  "],"~$nearest-of-ss",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",282,"^P",7,"^Q",282,"^R",20,"^S",["^T",["^U",["^T",[["~$ss","~$x"]]]]],"^V","Returns the nearest number to `x` of a sorted set\n\n~~~klipse\n  (nearest-of-ss (apply sorted-set (range 5)) 1.2)\n~~~\n  "],"^B","~$gadjett.collections/nearest-of-ss","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",20,"^Y",["^T",[["^4L","~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",282,"^Q",282,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["^4L","~$x"]]]]],"^V","Returns the nearest number to `x` of a sorted set\n\n~~~klipse\n  (nearest-of-ss (apply sorted-set (range 5)) 1.2)\n~~~\n  "],"~$map-reverse-hierarchy",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",110,"^P",7,"^Q",110,"^R",28,"^S",["^T",["^U",["^T",[["~$m"]]]]],"^V","Turns a hash map inside out.\n  See:  [here](http://stackoverflow.com/a/23653784/813665)\n\n~~~klipse\n  (map-reverse-hierarchy {:monday {:banana 2 :apple 3} \n                          :tuesday {:banana 5 :orange 2}})\n~~~\n"],"^B","~$gadjett.collections/map-reverse-hierarchy","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",28,"^Y",["^T",[["~$m"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",110,"^Q",110,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["~$m"]]]]],"^V","Turns a hash map inside out.\n  See:  [here](http://stackoverflow.com/a/23653784/813665)\n\n~~~klipse\n  (map-reverse-hierarchy {:monday {:banana 2 :apple 3} \n                          :tuesday {:banana 5 :orange 2}})\n~~~\n"],"~$remove-ending-comments",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",675,"^P",7,"^Q",675,"^R",29,"^S",["^T",["^U",["^T",[["~$s"]]]]],"^V","Removes comment lines from the end.\n\n~~~klipse\n  ; we use (char 10) for end-of-line due to technical issues with string manipulation with `codox`\n  (let [lines (clojure.string/join (char 10) [\"aa\", \"  \", \"bb\" \"; this comment should not appear\"])]\n  (remove-ending-comments lines))\n~~~\n  "],"^B","~$gadjett.collections/remove-ending-comments","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",29,"^Y",["^T",[["~$s"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",675,"^Q",675,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["~$s"]]]]],"^V","Removes comment lines from the end.\n\n~~~klipse\n  ; we use (char 10) for end-of-line due to technical issues with string manipulation with `codox`\n  (let [lines (clojure.string/join (char 10) [\"aa\", \"  \", \"bb\" \"; this comment should not appear\"])]\n  (remove-ending-comments lines))\n~~~\n  "],"~$map-object",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",80,"^P",7,"^Q",80,"^R",17,"^S",["^T",["^U",["^T",[["~$f","~$m"]]]]],"^V","Returns a map with the same keys as `m` and with the values transformed by `f`. `f` is a `1-ary` function that receives the key.\n\n~~~klipse\n  (map-object inc {:a 1 :b 2 :c 3})\n~~~\n  "],"^B","~$gadjett.collections/map-object","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",17,"^Y",["^T",[["~$f","~$m"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",80,"^Q",80,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["~$f","~$m"]]]]],"^V","Returns a map with the same keys as `m` and with the values transformed by `f`. `f` is a `1-ary` function that receives the key.\n\n~~~klipse\n  (map-object inc {:a 1 :b 2 :c 3})\n~~~\n  "],"~$=set",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",33,"^P",8,"^Q",33,"^R",12,"^2B",true,"^S",["^T",["^U",["^T",[["~$a","~$b"]]]]]],"^2B",true,"^B","~$gadjett.collections/=set","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",12,"^Y",["^T",[["~$a","~$b"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",33,"^Q",33,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["~$a","~$b"]]]]]],"~$my-replace",["^ ","^L",null,"^M",["^ ","^N","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/gadjett/collections.cljc","^O",657,"^P",7,"^Q",657,"^R",17,"^S",["^T",["^U",["^T",[["^2C","~$form"]]]]],"^V","Recursively transforms `form` by replacing keys in `smap` with their\n  values, spliced. The values in `smap` must be sequences. Like clojure.walk/prewalk-replace but supports list in values.\n\n~~~klipse\n(my-replace '{go (go gadjett)} '(go (<! (timeout 100)) (go (<! timeout 0))))\n~~~\n  "],"^B","~$gadjett.collections/my-replace","^X",false,"^N","target/public/cljs-out/dev/gadjett/collections.cljc","^R",17,"^Y",["^T",[["^2C","^4W"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",657,"^Q",657,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["^2C","^4W"]]]]],"^V","Recursively transforms `form` by replacing keys in `smap` with their\n  values, spliced. The values in `smap` must be sequences. Like clojure.walk/prewalk-replace but supports list in values.\n\n~~~klipse\n(my-replace '{go (go gadjett)} '(go (<! (timeout 100)) (go (<! timeout 0))))\n~~~\n  "]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^A",["~:max-elements-in-coll","~:else","~:max-chars-in-str","~:first-val","~:branches","~:leaves","~:max-val"]],"~:order",["^57","^54","^55","^56","^51","^53","^52"]],"^V",null]